from clusters import algs
import numpy
import pickle
from datetime import datetime
import matplotlib.pyplot as plt
from sklearn.manifold import TSNE
import statistics


##to perform hierarchical clustering first read in 1/3 of the ligand data set
with open('ligand_information.csv') as f:
    ligands_txt = f.readlines()
    
all_ligands_short = []
for i in range(1,len(ligands_txt)):
    if i % 3 == 0:
        all_ligands_short.append(algs.ligand(ligands_txt[i]))

##initialize the hierarchical clustering object with single linakge and the intstruction to build the tree util
## all the ligands are in 1 cluster
        
#hier_cluster = algs.HierarchicalClustering('single-linkage',1)
#hier_cluster.get_data(all_ligands_short)
#hier_cluster.cluster()

##This line saves the resultant cluster object with pickle to use for later analysis without having to re-cluster

#with open("legit_hier_clust.obj",'wb') as cluster_file:
#    pickle.dump(hier_cluster, cluster_file)
#    cluster_file.close()

#del hier_cluster


##can start from here to perfrom question 2 analysis if the long process of hierarchical clustering has been done previously

## this section loads the pickled object from above to start the analysis section of the assignemnt
with open('legit_hier_clust.obj','rb') as f:
    unpickler = pickle.Unpickler(f)
    hier_cluster = unpickler.load()
    f.close()
    
##to perform partitioning clustering load in the entire ligand set as this algorithm is quicker and can operate on the whole data set
with open('ligand_information.csv') as f:
    ligands_txt = f.readlines()
    
all_ligands = []
for i in range(1,len(ligands_txt)):
    all_ligands.append(algs.ligand(ligands_txt[i]))
    

    
##cluster all the ligands with k-means will blindly assume 10 clusters to start 
##this is included even post K optimization, because tSNE coordinates are calculated
##with the similarity matrix generated by this algorithm
kmeans_cluster_all = algs.PartitionClustering(10,1024)
kmeans_cluster_all.get_data(all_ligands)
kmeans_cluster_all.cluster()    

##cluster the condensed version of the ligand set similar to above
kmeans_cluster_short = algs.PartitionClustering(10,1024)
kmeans_cluster_short.get_data(all_ligands_short)
kmeans_cluster_short.cluster()    


##plot the tSNE dimension reduction plot for question 2
#generate the tSNE coordinates
tsne = TSNE(n_components=2, verbose=1, perplexity=40, n_iter=300)
tsne_results_all = tsne.fit_transform(kmeans_cluster_all.similarity_matrix)
tsne_results_short = tsne.fit_transform(kmeans_cluster_short.similarity_matrix)


#generate the tsne all plot 
plt.figure(figsize=(10,10))
plt.scatter(tsne_results_all[:,0],tsne_results_all[:,1]) 
plt.gca().set_aspect('equal','datalim')
plt.xlabel("tSNE component 1")
plt.ylabel("tSNE component 2")
plt.title("tSNE Plot for All Ligands Question 2")
plt.savefig("q2_all.png")

#generate the tsne short plot
plt.figure(figsize=(10,10))
plt.scatter(tsne_results_short[:,0],tsne_results_short[:,1]) 
plt.gca().set_aspect('equal','datalim')
plt.xlabel("tSNE component 1")
plt.ylabel("tSNE component 2")
plt.title("tSNE Plot for Truncated Set of Ligands Question 2")
plt.savefig("q2_short.png")



##Determine the ideal number of clusters to use for k-means short list related to question 2
Ks = 12
sil_scores_km_short = numpy.zeros((Ks))
distance_matrix_km_short = algs.euclid_distance(kmeans_cluster_short.similarity_matrix)
for i in range(2,Ks):
    kmeans_cluster_short.update_cluster_number(i)
    kmeans_cluster_short.cluster()
    silhouette_scores = numpy.zeros((len(kmeans_cluster_short.cluster_assignments)))
    for j in range(len(kmeans_cluster_short.cluster_assignments)):
        silhouette_scores[j] = algs.silhouette_score(distance_matrix_km_short,numpy.transpose(kmeans_cluster_short.cluster_assignments)[0],j)
    sil_scores_km_short[i] = statistics.mean(silhouette_scores)

##Determine the ideal number of clusters to use for k-means all list related to question 2
Ks = 12
sil_scores_km_all = numpy.zeros((Ks))
distance_matrix_km_all = algs.euclid_distance(kmeans_cluster_all.similarity_matrix)
for i in range(2,Ks):
    kmeans_cluster_all.update_cluster_number(i)
    kmeans_cluster_all.cluster()
    silhouette_scores = numpy.zeros((len(kmeans_cluster_all.cluster_assignments)))
    for j in range(len(kmeans_cluster_short.cluster_assignments)):
        silhouette_scores[j] = algs.silhouette_score(distance_matrix_km_all,numpy.transpose(kmeans_cluster_all.cluster_assignments)[0],j)
    sil_scores_km_all[i] = statistics.mean(silhouette_scores)
    
##create plot for Q4 about cluster number determination
#for all ligands
plt.figure(figsize=(10,10))
plt.plot(sil_scores_km_all)
plt.xlabel("Number of Clusters")
plt.ylabel("Silhouette Score")
plt.title("Average Silhouette Score by Number of Clusters for All Ligands, K-means Clustering")
plt.savefig("q4_all.png")
#for truncated set of ligands
plt.figure(figsize=(10,10))
plt.plot(sil_scores_km_short)
plt.xlabel("Number of Clusters")
plt.ylabel("Silhouette Score")
plt.title("Average Silhouette Score by Number of Clusters for Truncated Set of Ligands, K-means Clustering")
plt.savefig("q4_short.png")



##redo the clusters at the ideal cluster number of 2    
kmeans_cluster_short.update_cluster_number(2)
kmeans_cluster_all.update_cluster_number(2)

kmeans_cluster_short.cluster()
kmeans_cluster_all.cluster()
    
#generate the tsne all plot with cluster color code
plt.figure(figsize=(10,10))
plt.scatter(tsne_results_all[:,0],tsne_results_all[:,1], c = kmeans_cluster_all.cluster_assignments) 
plt.gca().set_aspect('equal','datalim')
plt.xlabel("tSNE component 1")
plt.ylabel("tSNE component 2")
plt.title("tSNE Plot for All Ligands Question 3 Colored By K-Means")
plt.savefig("q3_all.png")

#generate the tsne short plot
plt.figure(figsize=(10,10))
plt.scatter(tsne_results_short[:,0],tsne_results_short[:,1], c = kmeans_cluster_short.cluster_assignments) 
plt.gca().set_aspect('equal','datalim')
plt.xlabel("tSNE component 1")
plt.ylabel("tSNE component 2")
plt.title("tSNE Plot for Truncated Set of Ligands Question 3 Colored by K-Means")
plt.savefig("q3_short.png")    




##Determine the ideal number of cluster to use for hierarchical clustering
Ks = 2000
sil_scores_hier = numpy.zeros((Ks))
distance_matrix_hier = hier_cluster.all_distances[:,:]
num_ligands = hier_cluster.dendogram.shape[0]
for i in range(2,Ks):
    silhouette_scores = numpy.zeros((len(hier_cluster.dendogram[(num_ligands-i)])))
    for j in range(len(hier_cluster.dendogram[(num_ligands-i)])):
        silhouette_scores[j] = algs.silhouette_score(distance_matrix_hier,hier_cluster.dendogram[(num_ligands-i)],j)
    sil_scores_hier[i] = statistics.mean(silhouette_scores)


##create plot for Q6 about cluster number determination hierarchical
#for truncated set of ligands
plt.figure(figsize=(10,10))
plt.plot(sil_scores_hier)
plt.xlabel("Number of Clusters")
plt.ylabel("Silhouette Score")
plt.title("Average Silhouette Score by Number of Clusters for Truncated Set of Ligands, Hierarchical Clustering")
plt.savefig("q6_short.png")


##generate the tsne short plot hierarchical
plt.figure(figsize=(10,10))
plt.scatter(tsne_results_short[:,0],tsne_results_short[:,1], c = hier_cluster.dendogram[2833,:]) 
plt.gca().set_aspect('equal','datalim')
plt.xlabel("tSNE component 1")
plt.ylabel("tSNE component 2")
plt.title("tSNE Plot for Truncated Set of Ligands Question 5 Colored By Hierachical Clustering")
plt.savefig("q5_short.png")    


##determine Jaccard Index related to question 8
#note: to get the cluster list for a given number of clusters with hierarhical clustering take the row of the dendogram by: number_ligands - number_clusters
print("The Jaccard Index comparing Hierarchical and K-Means is ", algs.Jaccard_Index(hier_cluster.dendogram[2833,:],kmeans_cluster_short.cluster_assignments))


##determine Autodock Vina Scores by cluster related to question 9
#first get the index in the ligand list of the ligands that belong to each cluster
cluster_0_indices = numpy.where(kmeans_cluster_all.cluster_assignments == 0)[0]
cluster_1_indices = numpy.where(kmeans_cluster_all.cluster_assignments == 1)[0]

num_0 = len(cluster_0_indices)
num_1 = len(cluster_1_indices)

ADV_scores_0 = numpy.zeros((num_0))
ADV_scores_1 = numpy.zeros((num_1))

#retrieve the AutoDock Vina scores for the ligand at a given index for each cluster set
for i in range(num_0):
    ADV_scores_0[i] = all_ligands[cluster_0_indices[i]].score
    
for j in range(num_1):
    ADV_scores_1[j] = all_ligands[cluster_1_indices[j]].score
    
    

##create histogram showing scores by cluster related to question 9
plt.figure(figsize=(10,8))
plt.hist(ADV_scores_0, bins = 100, alpha=0.5, label='Cluster 0')
plt.hist(ADV_scores_1, bins = 100, alpha=0.5, label='Cluster 1')
plt.xlabel("AutoDock Vina Score")
plt.ylabel("Number of Ligands per Bin")
plt.title("Auto Dock Vina Score Histograms by K-Means Cluster")
plt.legend(loc='upper right')
plt.savefig("q9_all.png")



##print the IDs of top 5 per cluster molecules
adv_scores_0_sorted = numpy.sort(ADV_scores_0)
adv_scores_1_sorted = numpy.sort(ADV_scores_1)


for i in range(10):
    ADV_0_index = numpy.where(ADV_scores_0 == adv_scores_0_sorted[i])[0]
    print('A top 10 Cluster 0 Ligand is ID ', all_ligands[cluster_0_indices[ADV_0_index][0]].ID)
    ADV_1_index = numpy.where(ADV_scores_1 == adv_scores_1_sorted[i])[0]
    print('A top 10 Cluster 1 Ligand is ID ', all_ligands[cluster_1_indices[ADV_1_index][0]].ID)
    